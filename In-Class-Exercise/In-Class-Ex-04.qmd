---
title: "In Class Exercise 4"
date: "4 Feb 2023"
date-modified: "'r System.Date()"
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---

```{r}
pacman::p_load(plotly, DT, patchwork, tidyverse, ggstatsplot, readxl, performance, parameters, see, gtsummary)
```

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

```{r}
plot_ly(data = exam_data, 
        x = ~ENGLISH,
        y = ~MATHS,
        color = ~RACE)
```

Alternative way of using plotly: ggplot2

```{r}
p <- ggplot(data=exam_data, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(dotsize = 1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
ggplotly(p) 
```

**Two-sample mean test (ggbetweenstats)**

Student T-test assumes equal variance, hence the more appropriate test would be the Welsh test. Confidence interval is by default 95%.

```{r}
ggbetweenstats(
  data = exam_data,
  x = GENDER, 
  y = MATHS,
  type = "np",
  messages = FALSE
)
```

Visualizing Models :

```{r}
car_resale <- read_xls("data/ToyotaCorolla.xls", 
                       "data")
car_resale
```

```{r}
model <- lm(Price ~ Age_08_04 + Mfg_Year + KM + 
              Weight + Guarantee_Period, data = car_resale)
model
```

Can use the function asdataframe to join all the columns up together.

```{r}
check_c <- check_collinearity(model)
plot(check_c)
```

```{r}
model1 <- lm(Price ~ Age_08_04 + KM + 
              Weight + Guarantee_Period, data = car_resale)

check_n <- check_normality(model1)

plot(check_n)
```

Presenting the summary of Model with the characteristic, beta, CI and p-value.

```{r}
tbl_regression(model1, intercept = TRUE)

check_model(model1)
```
